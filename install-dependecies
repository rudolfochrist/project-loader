#!/bin/bash

# helpers

# meta
version=$(cat version)

assert_value ()
{
    if [ -z "$2" ] || [ "${2:0:1}" = "-" ]; then
        echo "Error: Argument for $(cat version) is missing" >&2
        exit 1
    fi
}

# https://stackoverflow.com/questions/29436275/how-to-prompt-for-yes-or-no-in-bash
function yes_or_no {
    while true; do
        read -rp "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;
            [Nn]*) echo "Aborted" ; exit  1 ;;
        esac
    done
}

usage ()
{
    cat <<EOF
Usage: $(basename "$0") [options] [-f file]

Options:
  -f, --lock-file                        Specify ql.lock file to use.
  -y                                     Force download regadless systems directory exists.
  --verbose                              Show verbose output.
  -v, --version                          Show version.
  -h, --help                             Show help.
EOF
}

# Parsing args
params=""
lock_file="ql.lock"
systems_dir=".ql-systems"
force="false"
global=no
curl_verbose="-sS"
md5sum_verbose=/dev/null

while (( "$#" )); do
    case "$1" in
        -f|--sytems_file)
            lock_file="$2"
            shift 2
            ;;
        -y)
            force="true"
            shift
            ;;
        --verbose)
            curl_verbose="-S"
            md5sum_verbose=/dev/stdout
            shift
            ;;
        -v|--version)
            echo "$(basename "$0") v$version"
            exit 0
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
        *)
            params+="$1 "
            shift
            ;;
    esac
done
# set positional arguments in their proper place
eval set -- "$params"

if [[ ! -e "$lock_file" ]]; then
    echo "Lock file missing: $lock_file"
    exit 1
fi

if [[ "$force" = "true" ]]; then
    rm -r "$systems_dir"
fi

mkdir -p "$systems_dir"

while read line
do
    if [[ -n "$line" ]]
    then
        url="$(echo "$line" | cut -d' ' -f1)"
        hash="$(echo "$line"| cut -d' ' -f2,3)"
        tarball="$(basename "$url")"
        dir="${tarball%.tgz}"

        echo "Installing $dir"
        if [[ ! -e "$systems_dir/$dir" ]]
        then
            echo "|-- Downloading $dir"
            curl "$curl_verbose" "$url" -o "$systems_dir/$tarball"
            if (cd "$systems_dir" && echo "$hash" | md5sum -c > "$md5sum_verbose")
            then
                echo -e "|-- Extracting $dir\n"
                tar xf "$systems_dir/$tarball" -C "$systems_dir"
            fi
            rm -f "$systems_dir/$tarball"
        fi
    fi
done < "$lock_file"

system_count="$(find "$systems_dir" -maxdepth 1 -mindepth 1 -type d | wc -l | xargs)" # xargs to trim whitespace

echo "Installed $system_count systems."


